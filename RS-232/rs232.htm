<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
    <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
    <title>RS-232 for Linux and Windows</title>
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="-1">
    <meta name="description" content="RS-232 for Linux and Windows">
    <link rel="stylesheet" type="text/css" href="RS-232%20for%20Linux%20and%20Windows_files/styles.css">
    <style>
        body { padding-top: 65px; }
        
        h1,h2,h3,h4,h5,h6 {
        
            margin-left: 25px; font-family: Arial;
        }
        
        h3 {
            padding-bottom: 0.25em;
            background-image: url("underline.png");
            background-repeat: repeat-x;
            background-position: bottom;
        }
        
        ul.normal a          { line-height: 1.8em; font-size: 0.9em;}
        
        pre.code             { margin-left: 25px; line-height: 1.1em; font-size: 1em; background-color: #ECECEC; color: black;}
        
        pre.console          { margin-left: 25px; line-height: 1.1em; font-size: 1em; background-color: black; color: green;}
        
        p                    { margin-left: 25px; line-height: 1.5em; font-size: 0.9em; font-family: Arial;}
        
        p.right, div.right   { text-align: right;  }
        p.center, div.center { text-align: center; }
        
        img.greyborder {
        
            padding: 2px;
            border: solid 1px rgb(60%,60%,60%);
            margin-left: 1.2em;
            margin-right: 1.2em;
        }
        
        div.cimage {
        
            margin-top: 1.2em;
            text-align: center;
            font-family: Arial;
        }
        
        div.caption {
        
            text-align: center;
            font-size: 0.85em;
            font-family: Arial;
            color: rgb(20%,20%,20%);
        }
        
        li.normal {
            font-family: Arial;
        }
        
        ul.navbar {
            list-style-type: none;
            margin: 0;
            padding: 0;
            background-color: #333;
            overflow: none;
            position: fixed;
            top: 0;
            width: 100%;
        }
        
        li.navbar {
            float: left;
        }
        
        li.navbar a, .dropbtn {
            display: inline-block;
            color: white;
            text-align: center;
            font-family: Arial;
            padding: 14px 16px;
            text-decoration: none;
        }
        
        li.navbar a:hover, .dropdown:hover .dropbtn {
            background-color: #111;
        }
        
        .dropdown {
            display: inline-block;
        }
        
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            min-width: 160px;
            box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
        }
        
        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            font-family: Arial;
            display: block;
        }
        
        .dropdown-content a:hover {background-color: #f1f1f1}
        
        .dropdown:hover .dropdown-content {
            display: block;
        }
        
        
        th,td {
           border: 1px solid black;
           border-collapse: collapse;
           text-align: center;
           font-family: Arial;
           font-size: 0.9em;
           width: 80px;
           height: 25px;
        }
        
        
        a.anchor {
          padding-top: 75px;
          margin-top: -75px;
        }
    </style>
</head><body>

<ul class="navbar">
  <li class="navbar"><a href="http://www.teuniz.net/index.html">Home</a></li>
  <li>
    <div class="dropdown">
      <a class="dropbtn">Projects</a>
      <div class="dropdown-content">
        <a href="http://www.teuniz.net/edfbrowser/index.html">EDFbrowser</a>
        <a href="http://www.teuniz.net/edflib/index.html">EDFlib</a>
        <a href="http://www.teuniz.net/edf_labview/index.html">EDF for Labview</a>
        <a href="#">RS-232</a>
        <a href="http://www.teuniz.net/DSRemote/index.html">DSRemote</a>
        <a href="http://www.teuniz.net/serial-com-tester/index.html">Serial Com Tester</a>
        <a href="http://www.teuniz.net/Timer_code/index.html">Timer library</a>
        <a href="http://www.teuniz.net/eagle/eaglelibcheck/index.html">Eagle library checker</a>
      </div>
    </div>
  </li>
</ul>

<h1>RS-232 for Linux, FreeBSD and Windows</h1>

<p>
    Here you can find code to use the serial port.<br>
    It has been tested with GCC on Linux and <a href="http://mingw-w64.org/">Mingw-w64</a> on Windows.<br>
    Handshaking or flowcontrol is not supported.<br>
    It uses polling to receive characters from the serial port.<br>
    Interrupt/event-based is not supported.<br><br>

    It is licensed under the <a href="http://www.gnu.org/licenses/gpl-3.0.txt">GPL version 3</a>.<br><br>

    No serial port available on your computer? Use a <a href="http://shop.clickandbuild.com/cnb/shop/ftdichip/cnb/shop/ftdichip/cnb/shop/ftdichip?productID=55&amp;op=catalogue-product_info-null&amp;prodCategoryID=84">USB to RS232 cable</a>.<br>
</p>

<p><br></p>

<h3>Download</h3>

<p>
    This is free software, it is experimental and available under the GPL License version 3.<br>
    Despite this software being intended to be useful, there is no warranty. Use this software at your own risk.
</p>

<p>
    <b><big>October 05, 2016 new version by SG:</big></b><br>
    - changed functions name and signature.<br>
    - return error strings instead of printing them.<br>
    - linux half untested so probably broken.<br>
</p>

<p>
    <b><big>July 10, 2016 new version:</big></b><br>
    - added the function: RS232_GetPortnr().<br>
    - always unlock the device in case of an error.<br>
</p>

<p>
    <b><big>December 19, 2015 new version:</big></b><br>
    - added the functions: RS232_flushRX(), RS232_flushTX() and RS232_flushRXTX().<br>
</p>

<p>
    <b><big>October 11, 2015 new version:</big></b><br>
    - Check if the serial port is already opened by another process, before trying to open it.<br>
</p>

<p>
    <b><big>January 10, 2015 new version:</big></b><br>
    - Fixed a bug that affected the parity settings.<br>
</p>

<p>
    <b><big>December 6, 2014 new version:</big></b><br>
    - Make it compile on FreeBSD.<br>
    - Added the devices "/dev/cuau0", etc. needed for FreeBSD.<br>
</p>

<p>
    <b><big>October 5, 2014 new version:</big></b><br>
    - Added the possibility to set the mode (databits, parity and stopbits).<br>
    - Changed function RS232_OpenComport(), from now on, an extra argument is required to set the mode.<br>
    - Fixed a bug that could set wrong baudrates on Linux systems (POSIX instead of BSD style).<br>
</p>

<p>
    <b><big>Januari 31, 2014 new version:</big></b><br>
    - Fixed a bug that made it impossible to read from the serial port on Linux 64-bit systems.<br>
</p>

<p>
    <b><big>December 26, 2013 new version:</big></b><br>
    - added the function RS232_IsDCDEnabled()<br>
</p>

<p>
    <b><big>February 1, 2013 new version:</big></b><br>
    - added the prefix "RS232_" to all functions in order to prevent clashes with other libraries<br>
    - set the DTR pin and RTS pin active when opening a serial port 
(some RS-422/485 converters need this to enable the outputbuffers)<br>
    - added the baudrates 500000 and 1000000 for windows, this can be usefull when using an FTDI-chip or USB-converter<br>
    - added the devices "/dev/ttyAMA0" and "/dev/ttyAMA1" for use with the Raspberry Pi<br>
    - added the devices "/dev/ttyACM0" and "/dev/ttyACM1" for use with the Atmel (USB-)microcontrollers<br>
    - added the devices "/dev/rfcomm0" and "/dev/rfcomm1" for use with Bluetooth<br>
    - added the devices "/dev/ircomm0" and "/dev/ircomm1" for Infrared communication<br>
    - added the following functions: RS232_enableDTR(), 
RS232_disableDTR(), RS232_enableRTS(), RS232_disableRTS() and 
RS232_IsDSREnabled()<br>
    - changed function "cprintf()" to "RS232_cputs()"<br>
<br>
</p>

<h3>The original source code</h3>
<ul>
    <li class="normal"><a href="http://www.teuniz.net/RS-232/RS-232.tar.gz">RS-232.tar.gz</a></li>
</ul>

<p class="first">
    Extract the file and copy rs232.h and rs232.c into your project directory.<br>
    Include rs232.h in your program sourcecode (like: #include 
"rs232.h") and compile and link rs232.c (add rs232.c to your project).<br><br>
</p>

<h3>Functions</h3>

<p>
    <var><a style="color: maroon">char*</a></var> RS232_OpenPort(<var><a style="color: maroon">const int</a> port_number, <a style="color: maroon">const int</a> baudrate, <a style="color: maroon">const char *</a> mode</var>)<br><br>
        &nbsp;&nbsp;Opens a comport, PortNbr starts with 0 (see the list of numbers).<br>
        &nbsp;&nbsp;Baudrate is expressed in baud per second i.e 115200 (see the list of possible baudrates).<br>
        &nbsp;&nbsp;Mode is a string in the form of "8N1", "7E2", etc.<br>
        &nbsp;&nbsp;8N1 means eight databits, no parity, one stopbit. If in doubt, use 8N1 (see the list of possible modes).<br>
        &nbsp;&nbsp;Returns an error string in case of an error, null pointer if no error.<br>
        &nbsp;&nbsp;In case the comport is already opened (by another process),<br>
        &nbsp;&nbsp;it will not open the port but raise an error instead.<br><br><br>

    <var><a style="color: maroon">char*</a></var> RS232_ReadBuffer(<var><a style="color: maroon">const int</a> port_number, <a style="color: maroon">unsigned char *</a> buffer, <a style="color: maroon">const int</a> maxsize, <a style="color: maroon">int *</a> usedsize</var>)<br><br>
        &nbsp;&nbsp;Gets characters from the serial port (if any).
        &nbsp;&nbsp;Takes buffer, a pointer to a buffer,<br>
        &nbsp;&nbsp;and maxsize the size of the buffer in bytes.<br>
        &nbsp;&nbsp;Fills the buffer and gives in usedsize the amount of received characters into the buffer.<br>
        &nbsp;&nbsp;Returns an error string in case of an error, null pointer if no error.<br>
        &nbsp;&nbsp;After successfully opening the COM-port, connect this function to a timer.<br>
        &nbsp;&nbsp;The timer should have an interval of approx. 20 to 100 milliSeconds.<br>
        &nbsp;&nbsp;Do not forget to stop the timer before closing the COM-port.<br>
        &nbsp;&nbsp;Always check the ActualSize! It tells you how many bytes<br>
        &nbsp;&nbsp;are actually received and present in your buffer!<br><br><br>

    <var><a style="color: maroon">int</a></var> RS232_SendByte(<var><a style="color: maroon">const int</a> port_number, <a style="color: maroon">const unsigned char</a> byte</var>)<br><br>
        &nbsp;&nbsp;Sends a byte via the serial port.<br>
        &nbsp;&nbsp;Returns an error string in case of an error, null pointer if no error.<br><br><br>

    <var><a style="color: maroon">int</a></var> RS232_SendBuffer(<var><a style="color: maroon">const int</a> port_number, <a style="color: maroon">unsigned char *</a> buffer, <a style="color: maroon">int</a> size,<a style="color: maroon">int *</a> sent</var>)<br><br>
        &nbsp;&nbsp;Sends multiple bytes via the serial port, buffer is a pointer to a buffer<br>
        &nbsp;&nbsp;and size the size of the buffer in bytes,<br>
        &nbsp;&nbsp;while sent is how many bytes were actually sent.<br>
        &nbsp;&nbsp;Returns an error string in case of an error, null pointer if no error.<br>
        &nbsp;&nbsp;This function blocks (it returns after all the bytes have been processed).<br><br><br>

    <var><a style="color: maroon">void</a></var> RS232_ClosePort(<var><a style="color: maroon">const int</a> port_number</var>)<br><br>
        &nbsp;&nbsp;Closes the serial port.<br>
        &nbsp;&nbsp;Returns an error string in case of an error, null pointer if no error.<br><br><br>

    <var><a style="color: maroon">char*</a></var> RS232_SendText(<var><a style="color: maroon">const int</a> port_number, <a style="color: maroon">const char *</a> text</var>)<br><br>
        &nbsp;&nbsp;Sends a null-terminated string via the serial port.<br>
        &nbsp;&nbsp;Returns an error string in case of an error, null pointer if no error.<br><br><br>

    <var><a style="color: maroon">char *</a></var> RS232_GetPortNbr(<var><a style="color: maroon">const char *</a> device_name, <a style="color: maroon">int *</a> port_number</var>)<br><br>
        &nbsp;&nbsp;Takes a first argument a device name, for example "ttyS0" or "COM1".<br>
        &nbsp;&nbsp;Gives into second argument the matching com port number.<br>
        &nbsp;&nbsp;Doesn't mean the device actually exists!<br>
        &nbsp;&nbsp;Returns an error string in case of an error, null pointer if no error.<br><br><br>

    The following functions are normally not needed but can be used to set or check the status of the control-lines:<br><br>

    <var><a style="color: maroon">void</a></var> RS232_EnableDTR(<var><a style="color: maroon">const int</a> port_number</var>)<br><br>
        &nbsp;&nbsp;Sets the DTR line high (active state).<br><br><br>

    <var><a style="color: maroon">void</a></var> RS232_DisableDTR(<var><a style="color: maroon">const int</a> port_number</var>)<br><br>
        &nbsp;&nbsp;Sets the DTR line low (non active state).<br><br><br>

    <var><a style="color: maroon">void</a></var> RS232_EnableRTS(<var><a style="color: maroon">const int</a> port_number</var>)<br><br>
        &nbsp;&nbsp;Sets the RTS line high (active state).<br><br><br>

    <var><a style="color: maroon">void</a></var> RS232_DisableRTS(<var><a style="color: maroon">const int</a> port_number</var>)<br><br>
        &nbsp;&nbsp;Sets the RTS line low (non active state).<br><br><br>

    <var><a style="color: maroon">int</a></var> RS232_IsDSREnabled(<var><a style="color: maroon">const int</a> port_number</var>)<br><br>
        &nbsp;&nbsp;Checks the status of the DSR-pin. Returns 1 when the the DSR line is high (active state), otherwise 0.<br><br><br>

    <var><a style="color: maroon">int</a></var> RS232_IsCTSEnabled(<var><a style="color: maroon">const int</a> port_number</var>)<br><br>
        &nbsp;&nbsp;Checks the status of the CTS-pin. Returns 1 when the the CTS line is high (active state), otherwise 0.<br><br><br>

    <var><a style="color: maroon">int</a></var> RS232_IsDCDEnabled(<var><a style="color: maroon">const int</a> port_number</var>)<br><br>
        &nbsp;&nbsp;Checks the status of the DCD-pin. Returns 1 when the the DCD line is high (active state), otherwise 0.<br>
        &nbsp;&nbsp;The following functions are normally not needed but can be used to empty the rx/tx buffers:<br>
        &nbsp;&nbsp;("discards data written to the serial port but not transmitted, or data received but not read")<br><br><br>

    <var><a style="color: maroon">void</a></var> RS232_FlushRX(<var><a style="color: maroon">const int</a> port_number</var>)<br><br>
        &nbsp;&nbsp;Flushes data received but not read.<br><br><br>

    <var><a style="color: maroon">void</a></var> RS232_FlushTX(<var><a style="color: maroon">const int</a> port_number</var>)<br><br>
        &nbsp;&nbsp;Flushes data written but not transmitted.<br><br><br>

    <var><a style="color: maroon">void</a></var> RS232_FlushRXTX(<var><a style="color: maroon">const int</a> port_number</var>)<br><br>
        &nbsp;&nbsp;Flushes both data received but not read, and data written but not transmitted.<br>
        &nbsp;&nbsp;May be removed, just use both RS232_FlushRX and RS232_FlushTX.<br><br><br>

</p>

<p><br></p>

<h3>Notes:</h3>

<p>
    You don't need to poll port when you only want to send characters.<br>
    Sending and receiving do not influence each other.<br>
<br>
    The os (kernel) has an internal buffer of 4096 bytes.<br>
    If this buffer is full and a new character arrives on the serial port,<br>
    the oldest character in the buffer will be overwritten and thus will be lost.<br>
<br>
    After a successful call to RS232_OpenPort(...), the os will start to buffer incoming characters.<br>
<br>
    Do not use Microsoft tools to compile this library.<br>
    The Microsoft C-compiler is an old and retarded compiler that does not even support ANSI C99.<br>
<br>
</p>

<p>
    <br><b><big>Tip:</big></b> To get access to the serial port on Linux, you need to be a member of the group "dialout".<br>
<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Look <a href="http://www.teuniz.net/Timer_code/index.html">here</a> for a <a href="http://www.teuniz.net/Timer_code/index.html">timer library</a>.
<br>
<br>
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Look <a href="http://www.teuniz.net/serial-com-tester/index.html">here</a> for a <a href="http://www.teuniz.net/serial-com-tester/index.html">serial communication tester/debugger</a>.
</p>

<p><br></p>

<h3>List of comport numbers, possible baudrates and modes:</h3>

<p><br></p>

<div>
<table style="vertical-align:top; display:inline-table; empty-cells: hide; margin-left: 75px; border-collapse: collapse;">
  <tbody>
    <tr>
      <th>port nr.</th>
      <th>Linux</th>
      <th>windows</th>
    </tr>
    <tr>
      <td>0</td>
      <td>ttyS0</td>
      <td>COM1</td>
    </tr>
    <tr>
      <td>1</td>
      <td>ttyS1</td>
      <td>COM2</td>
    </tr>
    <tr>
      <td>2</td>
      <td>ttyS2</td>
      <td>COM3</td>
    </tr>
    <tr>
      <td>3</td>
      <td>ttyS3</td>
      <td>COM4</td>
    </tr>
    <tr>
      <td>4</td>
      <td>ttyS4</td>
      <td>COM5</td>
    </tr>
    <tr>
      <td>5</td>
      <td>ttyS5</td>
      <td>COM6</td>
    </tr>
    <tr>
      <td>6</td>
      <td>ttyS6</td>
      <td>COM7</td>
    </tr>
    <tr>
      <td>7</td>
      <td>ttyS7</td>
      <td>COM8</td>
    </tr>
    <tr>
      <td>8</td>
      <td>ttyS8</td>
      <td>COM9</td>
    </tr>
    <tr>
      <td>9</td>
      <td>ttyS9</td>
      <td>COM10</td>
    </tr>
    <tr>
      <td>10</td>
      <td>ttyS10</td>
      <td>COM11</td>
    </tr>
    <tr>
      <td>11</td>
      <td>ttyS11</td>
      <td>COM12</td>
    </tr>
    <tr>
      <td>12</td>
      <td>ttyS12</td>
      <td>COM13</td>
    </tr>
    <tr>
      <td>13</td>
      <td>ttyS13</td>
      <td>COM14</td>
    </tr>
    <tr>
      <td>14</td>
      <td>ttyS14</td>
      <td>COM15</td>
    </tr>
    <tr>
      <td>15</td>
      <td>ttyS15</td>
      <td>COM16</td>
    </tr>
    <tr>
      <td>16</td>
      <td>ttyUSB0</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>17</td>
      <td>ttyUSB1</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>18</td>
      <td>ttyUSB2</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>19</td>
      <td>ttyUSB3</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>20</td>
      <td>ttyUSB4</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>21</td>
      <td>ttyUSB5</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>22</td>
      <td>ttyAMA0</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>23</td>
      <td>ttyAMA1</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>24</td>
      <td>ttyACM0</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>25</td>
      <td>ttyACM1</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>26</td>
      <td>rfcomm0</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>27</td>
      <td>rfcomm1</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>28</td>
      <td>ircomm0</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>29</td>
      <td>ircomm1</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>30</td>
      <td>cuau0</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>31</td>
      <td>cuau1</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>32</td>
      <td>cuau2</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>33</td>
      <td>cuau3</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>34</td>
      <td>cuaU0</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>35</td>
      <td>cuaU1</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>36</td>
      <td>cuaU2</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>37</td>
      <td>cuaU3</td>
      <td>n.a.</td>
    </tr>
  </tbody>
</table>

<table style="vertical-align:top; display:inline-table; empty-cells: hide; margin-left: 75px; border-collapse: collapse;">
  <tbody>
    <tr>
      <th>Linux</th>
      <th>windows</th>
    </tr>
    <tr>
      <td>50</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>75</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>110</td>
      <td>110</td>
    </tr>
    <tr>
      <td>134</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>150</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>200</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>300</td>
      <td>300</td>
    </tr>
    <tr>
      <td>600</td>
      <td>600</td>
    </tr>
    <tr>
      <td>1200</td>
      <td>1200</td>
    </tr>
    <tr>
      <td>1800</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>2400</td>
      <td>2400</td>
    </tr>
    <tr>
      <td>4800</td>
      <td>4800</td>
    </tr>
    <tr>
      <td>9600</td>
      <td>9600</td>
    </tr>
    <tr>
      <td>19200</td>
      <td>19200</td>
    </tr>
    <tr>
      <td>38400</td>
      <td>38400</td>
    </tr>
    <tr>
      <td>57600</td>
      <td>57600</td>
    </tr>
    <tr>
      <td>115200</td>
      <td>115200</td>
    </tr>
    <tr>
      <td>230400</td>
      <td>128000</td>
    </tr>
    <tr>
      <td>460800</td>
      <td>256000</td>
    </tr>
    <tr>
      <td>500000</td>
      <td>500000</td>
    </tr>
    <tr>
      <td>576000</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>921600</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>1000000</td>
      <td>1000000</td>
    </tr>
    <tr>
      <td>1152000</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>1500000</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>2000000</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>2500000</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>3000000</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>3500000</td>
      <td>n.a.</td>
    </tr>
    <tr>
      <td>4000000</td>
      <td>n.a.</td>
    </tr>
  </tbody>
</table>

<table style="vertical-align:top; display:inline-table; empty-cells: hide; margin-left: 75px; border-collapse: collapse;">
  <tbody>
    <tr>
      <th>Mode</th>
    </tr>
    <tr>
      <td>8N1</td>
    </tr>
    <tr>
      <td>8O1</td>
    </tr>
    <tr>
      <td>8E1</td>
    </tr>
    <tr>
      <td>8N2</td>
    </tr>
    <tr>
      <td>8O2</td>
    </tr>
    <tr>
      <td>8E2</td>
    </tr>
    <tr>
      <td>7N1</td>
    </tr>
    <tr>
      <td>7O1</td>
    </tr>
    <tr>
      <td>7E1</td>
    </tr>
    <tr>
      <td>7N2</td>
    </tr>
    <tr>
      <td>7O2</td>
    </tr>
    <tr>
      <td>7E2</td>
    </tr>
    <tr>
      <td>6N1</td>
    </tr>
    <tr>
      <td>6O1</td>
    </tr>
    <tr>
      <td>6E1</td>
    </tr>
    <tr>
      <td>6N2</td>
    </tr>
    <tr>
      <td>6O2</td>
    </tr>
    <tr>
      <td>6E2</td>
    </tr>
    <tr>
      <td>5N1</td>
    </tr>
    <tr>
      <td>5O1</td>
    </tr>
    <tr>
      <td>5E1</td>
    </tr>
    <tr>
      <td>5N2</td>
    </tr>
    <tr>
      <td>5O2</td>
    </tr>
    <tr>
      <td>5E2</td>
    </tr>
  </tbody>
</table>
</div>

<p>
    <br><b><big>Note:</big></b> Traditional (on-board) UART's usually have a speed limit of max. 115200 baud.<br>
    
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Special
 cards and USB to Serial converters can usually be set to higher 
baudrates.<br>
<br><br>
</p>

<h3>Connector pinlayout</h3>

<p><br></p>

<div class="cimage">
    <a><img class="greyborder" src="serialport.png" alt="" height="357" width="375"></a>
</div>

<p><br></p>

<div class="caption">
    When using this code, you only need to connect pins 2, 3 and 5 of the serial port (plus the shielding) to your device.<br>
</div>

<p><br><br><br><br></p>


</body></html>